
@{
    ViewData["Title"] = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model BusinessObject.Model.DataResult
@{
    var shopModel = Model.Result as BusinessObject.Model.Page.ShopModel;

    var selectedBrandIds = shopModel.selectedBrand;

    var selectedCategoryIds = shopModel.selectedCategory;

    var selectedSort = shopModel.sortFilter;

    var totalPage = shopModel.navigationModel.totalPage;
    var currentPage = shopModel.navigationModel.currentPage;
    var isFirstPage = shopModel.navigationModel.isFirstPage;
    var isLastPage = shopModel.navigationModel.isLastPage;

    var displayRange = 1;
}
<!-- Breadcrumb Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="#">Home</a>
                <a class="breadcrumb-item text-dark" href="#">Shop</a>
                <span class="breadcrumb-item active">Shop List</span>
            </nav>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<!-- Shop Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <!-- Shop Sidebar Start -->
        <div class="col-lg-3 col-md-4">

            @if (selectedBrandIds != null && selectedBrandIds.Count() > 0 ||
            selectedCategoryIds != null && selectedCategoryIds.Count() > 0 ||
            !selectedSort.Equals("") && selectedSort.Length > 0
            )
            {
                <!-- Fillter Choosen -->
                <h5 class="section-title position-relative text-uppercase mb-3">
                    <span class="bg-secondary pr-3">
                        Used filter
                    </span>
                </h5>
                <div class="bg-light p-4 mb-30">
                    <div class="list-used-filter">
                        @{
                            var filterCateUsed = new List<string>();
                            foreach (var category in shopModel.categoryModels)
                            {
                                if (selectedCategoryIds.Contains(category.CateId))
                                {
                                    filterCateUsed.Add(category.CateName);
                                }
                            }

                            var filterBrandUsed = new List<string>();
                            foreach (var brand in shopModel.brandModels)
                            {
                                if (selectedBrandIds.Contains(brand.BrandId))
                                {
                                    filterBrandUsed.Add(brand.BrandName);
                                }
                            }
                        }

                        @if (!selectedSort.Equals("") && selectedSort.Length > 0)
                        {
                            <div class="element-used-filter" data-sortFilter="@selectedSort" onclick="RemoveUsedFilter(this, 1)">
                                <div class="name-filter">@selectedSort</div>
                                <ion-icon name="close-circle-outline" class="icon-delete"></ion-icon>
                            </div>
                        }

                        <!--Start Display used filter-->
                        @if (filterCateUsed.Count() > 0)
                        {
                            @for (int i = 0; i < filterCateUsed.Count(); i++)
                            {
                                <div class="element-used-filter" data-cateFilter="@selectedCategoryIds[i]" onclick="RemoveUsedFilter(this, @(i+1))">
                                    <div class="name-filter">@filterCateUsed[i]</div>
                                    <ion-icon name="close-circle-outline" class="icon-delete"></ion-icon>
                                </div>
                            }
                        }
                        @if (filterBrandUsed.Count() > 0)
                        {
                            @for (int i = 0; i < filterBrandUsed.Count(); i++)
                            {
                                <div class="element-used-filter" data-brandFilter="@selectedBrandIds[i]" onclick="RemoveUsedFilter(this, @(i+1))">
                                    <div class="name-filter">@filterBrandUsed[i]</div>
                                    <ion-icon name="close-circle-outline" class="icon-delete"></ion-icon>
                                </div>
                            }

                        }


                        <!--End Display used filter-->

                    </div>
                    <div class="remove-filter">
                        <a href="/Product/Shop">Remove all used filter</a>
                    </div>
                </div>
                <!-- Fillter Choosen -->
            }

            <!-- Popularity Start -->
            <h5 class="section-title position-relative text-uppercase mb-3">
                <span class="bg-secondary pr-3">
                    Filter
                    by Popularity
                </span>
            </h5>
            <div class="bg-light p-4 mb-30">
                <form>

                    <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                        <input type="checkbox" class="custom-control-input shop" id="sort-discount" value="discount" @(selectedSort.Contains("discount") ? "checked" : "")>
                        <label class="custom-control-label" for="sort-discount">On Sale</label>
                        <span class="badge border font-weight-normal">@shopModel.saleAmount</span>
                    </div>

                </form>
            </div>
            <!-- Popularity End -->
            <!-- Categories Start -->
            <h5 class="section-title position-relative text-uppercase mb-3">
                <span class="bg-secondary pr-3">
                    Filter
                    by Categories
                </span>
            </h5>
            <div class="bg-light p-4 mb-30">
                <form>
                    @{
                        int index = 0;
                    }
                    @foreach (var item in shopModel.categoryModels)
                    {
                        <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                            <input type="checkbox" class="custom-control-input shop" id="cat-@item.CateId" value="@item.CateId" @(selectedCategoryIds.Contains(item.CateId) ? "checked" : "")>
                            <label class="custom-control-label" for="cat-@item.CateId">@item.CateName</label>
                            <span class="badge border font-weight-normal">@item.quantity</span>
                        </div>
                        index++;
                    }

                </form>
            </div>
            <!-- Categories End -->
            <!-- Brand Start -->
            <h5 class="section-title position-relative text-uppercase mb-3">
                <span class="bg-secondary pr-3">
                    Filter
                    by Brand
                </span>
            </h5>
            <div class="bg-light p-4 mb-30">
                <form>
                    @{
                        index = 0;
                    }
                    @foreach (var item in shopModel.brandModels)
                    {
                        <div class="custom-control custom-checkbox d-flex align-items-center justify-content-between mb-3">
                            <input type="checkbox" class="custom-control-input shop" id="brand-@item.BrandId" value="@item.BrandId" @(selectedBrandIds.Contains(item.BrandId) ? "checked" : "")>
                            <label class="custom-control-label" for="brand-@item.BrandId">@item.BrandName</label>
                            <span class="badge border font-weight-normal">@item.quantity</span>
                        </div>
                        index++;
                    }

                </form>
            </div>
            <!-- Brand End -->
        </div>
        <!-- Shop Sidebar End -->
        <!-- Shop Product Start -->
        <div class="col-lg-9 col-md-8">
            <div class="row pb-3">
                <div class="col-12 pb-1">
                    <div class="d-flex align-items-center justify-content-between mb-4">
                        <div>
                        </div>
                        <div class="ml-2">
                            @{
                                var order = Context.Request.Query["order"].ToString();
                                if (!string.IsNullOrEmpty(order))
                                {
                                    string result = char.ToUpper(order[0]) + order.Substring(1);
                                    string bold = "font-weight-bold";
                                    <div class="btn-group ml-2">
                                        <button type="button" class="btn btn-sm btn-light dropdown-toggle"
                                                data-toggle="dropdown">
                                            Sorting: <span id="sort-order" class="font-weight-bold">@result</span>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-right">
                                            <span id="sort-standard " class="dropdown-item" onclick="Order(this)" data-order="standard">Standard</span>
                                            <span id="sort-highest" class="dropdown-item @(order.Equals("highest")?bold:"")" onclick="Order(this)" data-order="highest">Highest</span>
                                            <span id="sort-lowest" class="dropdown-item @(order.Equals("lowest")?bold:"")" onclick="Order(this)" data-order="lowest">Lowest</span>

                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="btn-group ml-2">
                                        <button type="button" class="btn btn-sm btn-light dropdown-toggle"
                                                data-toggle="dropdown">
                                            Sorting: <span id="sort-order" class="font-weight-bold">Standard</span>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-right">
                                            <span id="sort-standard " class="dropdown-item font-weight-bold" onclick="Order(this)" data-order="standard">Standard</span>
                                            <span id="sort-highest" class="dropdown-item" onclick="Order(this)" data-order="highest">Highest</span>
                                            <span id="sort-lowest" class="dropdown-item" onclick="Order(this)" data-order="lowest">Lowest</span>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                    </div>
                </div>

                @if (shopModel.products == null)
                {
                    <div class="col-12 text-center">
                        <p style="font-size: 30px; color: black">There are no products available</p>
                    </div>
                }
                else
                {
                    @foreach (var item in shopModel.products)
                    {
                        <div class="col-lg-4 col-md-6 col-sm-6 pb-1">
                            @Html.Partial("Partial/Card", item)
                        </div>
                    }

                    <div class="col-12">
                        <nav>
                            <ul class="pagination justify-content-center">


                                <li class="page-item @(isFirstPage ? "disabled" : "")">
                                    @if (isFirstPage)
                                    {
                                        <span class="page-link">Previous</span>
                                    }
                                    else
                                    {
                                        <a class="page-link" href="@BuildPageUrl(currentPage - 1)">Previous</a>
                                    }
                                </li>

                                @for (int i = 1; i <= totalPage; i++)
                                {
                                    if (i == 1 || i == totalPage || (i >= currentPage - displayRange && i <= currentPage + displayRange))
                                    {
                                        <li class="page-item @(currentPage == i ? "active" : "")">
                                            <a class="page-link" href="@BuildPageUrl(i)">@i</a>
                                        </li>
                                    }
                                    else if (i == currentPage - displayRange - 1 || i == currentPage + displayRange + 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                <li class="page-item @(isLastPage ? "disabled" : "")">
                                    @if (isLastPage)
                                    {
                                        <span class="page-link">Next</span>
                                    }
                                    else
                                    {
                                        <a class="page-link" href="@BuildPageUrl(currentPage + 1)">Next</a>
                                    }
                                </li>

                                @functions {
                                private string BuildPageUrl(int page)
                                {
                                    var shopModel = Model.Result as BusinessObject.Model.Page.ShopModel;

                                    // Initialize a list to store non-empty parameters
                                    var parameters = new List<string>();

                                    // Add category parameter if selected
                                    if (shopModel.selectedCategory != null && shopModel.selectedCategory.Count > 0)
                                        parameters.Add($"category={string.Join("&category=", shopModel.selectedCategory)}");

                                    // Add brand parameter if selected
                                    if (shopModel.selectedBrand != null && shopModel.selectedBrand.Count > 0)
                                        parameters.Add($"brand={string.Join("&brand=", shopModel.selectedBrand)}");

                                    // Add page, sort, and order parameters if they have values
                                    if (!string.IsNullOrEmpty(shopModel.sortFilter))
                                        parameters.Add($"sort={shopModel.sortFilter}");

                                    if (!string.IsNullOrEmpty(shopModel.orderFilter))
                                        parameters.Add($"order={shopModel.orderFilter}");

                                    // Add page parameter
                                    parameters.Add($"page={page}");

                                    // Combine with the base URL
                                    return ViewBag.url + "?" + string.Join("&", parameters);
                                }

                            }
                        </ul>
                    </nav>
                </div>
                }
            </div>
        </div>
        <!-- Shop Product End -->
    </div>
</div>
<!-- Shop End -->
<script src="~/js/shop.js"></script>

<div id="myModal-check" class="modal-check">
    <div class="modal-content-check">
        <div class="wrapper-check">
            <div class="tick-check"></div>
        </div>
        <p>The product has been added to Cart</p>
    </div>
</div>

<div id="myModal-x" class="modal-x">
    <div class="modal-content-x">
        <div class="wrapper-x">
            <div class="x-check"></div>
        </div>
        <h3>The product added is at maximum quantity</h3>
    </div>
</div>

